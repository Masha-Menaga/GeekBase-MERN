React
JS Library - building User Interfaces
Developed By Meta (Facebook)
SPA - Single page Application 
dynamic and Interactive Web application

Why use React
jquery js - Manual DOM 
React Virtual DOM

Messy Codes
Declarative - command - preform virtual DOM

Component - Code Reusability 

React Key Points

React JSX
Java Script XML - HTML with in JS
Readable code Format
Easy to understand

Component  - Reusable Blocks

Props - property - passing the data b/w Components

State - stores Dynamic Data & re-renders UI automatically

Hooks - function - manage State  (useState(),useEffect())
prefix - use

js run time Environment - v8 engine

React Js work Seprately with the help node.js

node js - opensource js run time environment
developed by Google  libo-library - (C++)

Notes for React:
React Current - react.dev
React Legacy code (old version) - legacy.react.org

React app install - 2 way

cra - create react app
vite - Third party react app

react org recommend - vite

vite  - Large Scalling Company Projects

npx create-react-app app-name

Start the APP - npm start 

npx - react pre defined folders auto generated

folder Structure
README.md - mark down  - like a project Documentation key - plain text

package.json - projects meta Details stores

eslintConfig -  showing the logical Errors - warnings

package-lock.json - Record the Exact versions of dependencies installed.
all memners in a team use same version

node-modules - 
store all dependencies & packages  - auto generated

.gitignore 
Every React app having their own git


wrapper component - 

import and Export
use the functions and datas from one file (component) to another (component)
export - 2 types
named export - 
default export - 1

component name starts with UpperCase (Pascal case)
hiTharunRagul - camel case

<></> - fragment - avoid unnecessary div

refresh- Reloading the entire page
render - updating only the necessary part (updation/changes occurs in state/props)

State Management
let is not working in React
if State Update Occur component will render

Hooks
functions
prefix - use(useState,useEffect,useContext,useRef,...)
useState - State Mangement 
syntax
[state,stateUpdatingfunction]=useState(initialization)
eg:[count,setCount]=useSate(0)

initialization 
0,- integer/numeric
"", - String
true/false - Boolean
Array
Object


ternary operator
condition?true:false
  short form -if else

React Developer Tool - Dev Tool

diff bw State and Props
state - internal component data  - change 
props - external component data - from parent to child - one way- child immutable one  (Read-only)


Props - property
External Data - immutable one -  cannot be change (within child)
Disadvantage - Props Drilling
Solve:
Component Composition
Context Api
Redux - third Party Library

Use Effect
Handle the Side Function
Fetch data from an API
updating DOM
Events, Timers

Syntax:
useEffect(()=>{

},[count])

3 types
1. continuedly run - render
2. one time run - empty array 
3. dependency change - run



Props Drilling - Avoid
Component Composition
context API - useContext
redux Third Party Library

Component Composition - Wrapper Component

Context API - UseContext
3 Steps
1. create Context
2. provide value
3. using the context

create Context 
const CounterContext = createContext();

if(a<b)
print b is bigger
else
print a is bigger

if(a<b)?print b is bigger:print a is bigger

useRef
Its also a Hook Concept
refers to the DOM Element changes
component without re-render


 <input/>

reference could be passed as props - use - fowardRef () - in childComponent


json File

{"...":"...."} - {"id":"1"}

asyn,await - 

Complex Datas Handle  - useReducer
Arrays and Objects - state management
heavy projects handle
similar to useState
follow  - dispatch , action

syntax:
const [state, dispatch]=useReducer(reducerFunction,InitailState)

similar to useState
const [state,stateUpdatingFunction]=useState(initialization)

state - current State
dispatch(action) - trigger the state update 
reducer (state,action)- a function how to update the State

array1=[10,20,30]
array2=[20,40,50]
newArray=[array1,array2]
[[10,20,30][20,40,50]]

newArray=[...array1,...array2]
[10,20,30,20,40,50]

Navigation
Router
Popular Library handling navigation in React Application
Dynamic Routing allows user to navigate b/w view, layout, without a full page reload. 

install - Router
npm i react-router-dom

landing page / - path
* - Error 

Link 
html - <a> - Reload
react  - <Link to=""></Link> - render

Params - parameter - dynamic Routing - :id - useParams

Nested Routes

Outlet - Render the Child in React

Navigation
Route - Defines routes (path - component mapping) - inside the <Routes>
Link - Declarative Navigation <nav> -clickable (header navigation)
params - id navigate
Nested Route - Outlet - Render the child Route
useNavigate - Hook - Programmatic Navigation - Eg: Login - Dynamic Navigation
Navigate - Redirects automatically when render- component inside 


API Fetching
useEffect - 
fetch 
request - object
response - json - object

axios - automatically convert



 


