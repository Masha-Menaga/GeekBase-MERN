backend
request-response cycle
user(frontEnd)->request--->Server --->DB-->response-->user

request-->response
error msg Show -- > try,catch block

front-end -> Client side ->userinteraction ->Browser
backend-end ->Server-side ->logic,data processing,security -> server& database


user intraction (Login button) -> Frontend Request (Nodejs+Express.js)-> Backend Process (Fetch data from MongoDB)->Response FrontEnd (Login Successful)

Why  do we Use Node.js?
JS , no need to learn another language
fast development for Full stack application

DB  - Data Base
SQL --> MySQL - Stores rows and Columns
No-SQL DB --> MongoDB  -> Stores all in Documents -->Collections (more than one Collections) -- >Object_id automatic creates
format - Like JSON ->BSON ->Binary JSON -->Access Faster (automatically Converts)


Install
4 things:
1. MongoDB Server --> 
2. MongoDB Shell --> (Commands/Query Works)
3. MongoDB Compass --> (GUI - easy access)
4. MongoDB Atlas  --> (Cloud Server)

MongoDB Community Server

MongoDB - Shell

Mongoose connection and Setup:
mongosh
show db
use <db-name>
db.createCollection("user")
show collections


CRUD Operations
create :
insertOne, insertMany

Read :
find,
find({name:"Masha"}),
findOne({name:"Masha"}), 
find().count(),
find({name:"Masha"}).count(),
find().limit(),
find().skip(),
find().sort()

Update - updateOne, UpdateMany()
Delete - deleteOne, deleteMany
 


config> db.user.insertMany([{ name: "Masha", email:"abc@gmail.
com"}])

config> db.user.updateMany({name:"Masha"},{$set:{email:"masha@gmail.com"}})

update Operators :
$set - update and to set in document
$unset - Remove the field from the Document
$inc - increment a numeric field by specific amount -{$inc:{age:1}}
$rename : Rename a field


db.user.deleteMany({name:"Masha"})

Express.js
fast,flexible,minimal Node.js FrameWork (library)
server-side development

install 
npm i express

const require     
const express=require("express")
const server=express();
CommonJS module syntax
traditional way node.js
require->module load


import :
import express from "express";
const server=express();
ES module (ECMA syntax) syntax
ES6 + standard
type:module ; package.json


CRUD Operation
create,read,update and delete
HTTP method
create - POST
read - GET
update - PUT,PATCH
delete - DELETE


install
npm i nodemon

nodemon server.js

npx nodemon server.js


status Code
success message : 200 series 
Client-side error : 400 series
server-Side Error : 500 series

environment variable
env file
.gitignore

How to Connect DB to server

install mongoose
get Mongoose Driver path form Atlas to .env 

MVC structure Project
M - Model - entity DB Connection,structure
V - View - user Interface - CSR, SSR
C - Controller - How to handle 

Create Model - User.js
create Schema
create Collection

Create Controller
getAllStudentUser - User.find()  
getStudentById - User.findById(req.params.id) 
CreateStudentUser - User.create(req.body)  - if user already exist - User.findOne(req.body)
updateStudentUser - User.findByIdAndUpdate(req.params.id, req.body) - if user already exist check with params and update
deleteStudentUser - User.deleteOne(req.body) - if user already exist - User.findOne(req.body)



Create Routes

Create - HTTP - Post
Read - HTTP - get
Update - HTTP - put
delete - HTTP - delete

userRoutes.get("/", getAllStudentUser)
userRoutes.get("/:id", getStudentById)
userRoutes.post("/", createStudentUser)
userRoutes.put("/:id", updateStudentUser)
userRoutes.delete("/", deleteStudentUser)

Difference b/w req.params, req.query, req.body

		req.params			req.query			req.body
Data Location -	URL Path			After ? the URL query String	HTTP request Body
Purpose	      -	to identify specific location	to filter,search / pass data	Data in JSON
Eg.	      -	/user/:id			/user?name=masha		{"name":"masha"}
Methods	      -	GET,DELETE			GET				POST,PUT,PATCH	


Error Handling


middleware - morgan - developer support - helps to developers -debugging
  http request and response loggings

install - npm i morgan

Express - Error Handling
middleware function,  -
 4 parameters - (err,req,res,next)
server.use(ErrorHandlers)

Validation - predefined keys
type,
required,
unique,
minlength
maxlength
match
min
max

Custom key
validate:{
validator:Number.isInteger,
message:"Age must not contain decimal value"
}










